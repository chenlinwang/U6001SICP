Before I start, the main part of this section is about how to understand the conception of /data abstraction/. To use certain kinds of data and their operations with knowing the detailed implementation of that. This could largely enhance the efficiency of developping super large systems with multiple people.

* Example: The arithmetic of the rational number
** Wishful thinking
To start, suppose we already have the functions below:
#+BEGIN_SRC scheme
; constructor
(make-rat n m)

; selectors ?
(numerator x)

(denominator x)
#+END_SRC

So how should we build up the basic + - * / operators for the rational numbers.

We take first step to see how the rules are:

#+BEGIN_EXAMPLE

a/b + c/d =  (ad + bc)/(bd)

a/b + c/d = (ad - bc)/(bd)

a/b * c/d = (ac)/(bd)

a/b / c/d = (ad)/(bc)
#+END_EXAMPLE

So just use that.

** How to implement
To implement =make-rat=, we need to know a basic data in =lisp=, that is =pair=, we could construct =pair= using the constructor =cons=. And =car= will give you the firs pair member and =cdr= will give the second.

Now just do what you need to do!
* Abstraction Barriers
We talks about the abstraction of the data in the example. What we did not see but do during the implementation is that, there are actually more abstractions during the data abstraction. And we denote the layers here as abstraction barriers.

** Rational number arithmetics
During the implementaion, we have some dependencies as follows:
#+BEGIN_EXAMPLE
Programs that use rational numbers and their arithmetics

----------------------------------------

rat-minus rat-divide

----------------------------------------

rat-add rat-times

----------------------------------------

make-rat numer denom

----------------------------------------

cons car cdr

#+END_EXAMPLE

The thing here is, if we have the layer upwards. And while implementing, we should, out of efficiency and later convinience, get as more done as possible in each layer. In that case, the code will be simpler and the later modification will be easier, as there are less code written.

** Bad Example
If we do not do as much as we could in =make-rat=, say, but =gcd= into the =numer= and =denom=, it will be terrible:

#+BEGIN_SRC scheme
(define (make-rat n d)
  (cons n d))
￼￼
(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))

(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))
#+END_SRC

It is hard to read as well as hard to modify.
* Data
In the case above, we aim to define the rational number with one single property. That is the uniqueness. The value of a rational number, composed by numerator and denominator with =make-rat=, should be the only criteria to decide the unqiueness of a rational number. If our design satisfy that, there is no doubt, it is a good design.

And to see it from ground up, we use =cons= , =car= and =cdr=. But that should not be mattered, since we wound write our own things with what we have learned, like:
#+BEGIN_SRC scheme
;;New cons
(define (new-cons x y)
  (define (pair m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else
           (display "No data with that No.\n"))))
  pair)

;;New car
(define (new-car p)
  (p 0))

;;New cdr
(define (new-cdr p)
  (p 1))
#+END_SRC

With these, we could implement the rational number with exact the same code. But pay an attention, we use a procedure, =pair=, here to represent data. That is a new concept called /message passing/. For efficiency reasons, =lisp= does not implement =cons= with procedure.
* Another Example of Designing a Abstracted Data

In this part, we want to design a measure of tolerance, which basically got us to implement the mathematic abstractiion, /interval/. We also start with the stretch for constructor and selector and then the operators on that.

** Constructor
As the tolerance is basically a single interval, we has a lower bound and upper bound that could uniquely represnet the interval.

** Selector
For selectors, we could have =lower-bound=, =upper-bound= and =length=.

** Operation
For operations, we shall be careful. Especially for the division operator, for it could cause a interval to become two:
#+BEGIN_EXAMPLE
A = [-1, 1]

1/A = (- \infin , -1] \cup [1 , \infin )
#+END_EXAMPLE

That would be really weird properity, that we need to be concerned of.
