* Exercise 1.1
Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.
** Answer
#+BEGIN_SRC scheme
; 10
10
; 12
(+ 5 4 3)
; 8
(- 9 1)
; 3
(/ 6 2)
; 6
( + (* 2 4) (- 4 6))
; 3
(define a 3)
; 4
(define b (+ a 1))
; 19
(+ a b (* a b))
; #f
(= a b)
; 4
(if (and (> b a) (< b (* a b)))
    b
    a)
; 16
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25))
; 6
(+ 2 (if (> b a) b a))
; 12
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (* a 1))

#+END_SRC

* Exercise 1.2

Translate the following expression into prefix form:
(5+4+(2-(3-(6+4/3)))) / (3*(6-2)*(2-7))

** Answer
#+BEGIN_SRC scheme
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 3)))))
   (* 3 (- 6 2) (- 2 7)))
#+END_SRC

* Exercise 1.3

Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
** Answer
What I am trying to do is to find the smallest number first and then subtract its square with the sum of the squares of the numbers.

#+BEGIN_SRC scheme
;;Define square
(define (square x) (* x x))
;;Find minimum in two numbers
(define (min2 x y) (if (> x y) y x))
;;Find minimum in three numbers
(define (min3 x y z) (min2 (min2 x y) z))
;;Result
(define (ex1.3 x y z) (- (+ (square x) (square y) (square z))
                         (square (min3 x y z))))
#+END_SRC

* Exercise 1.4
Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:
** Answer
#+BEGIN_SRC scheme
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+END_SRC

#+BEGIN_SRC scheme
(define (a-plus-abs-b a b)
      ((if (> b 0) + -) a b))
#+END_SRC

The =a-plus-abs-b= first test whether =b= is positive, if so, it will use plus, else it will use the minus

* Exercise 1.5
Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:
** Answer
#+BEGIN_SRC scheme
(define (p) (p))
(define (test x y)
    (if (= x 0)
        ￼0
        y))
(test 0 (p))
#+END_SRC
#+BEGIN_QUOTE
What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)
#+END_QUOTE

For applicative-order, it will end in infinite looping. As the order evaluates, it will first try to evaluate =(p)= and it results in =(p)= and then it will go like this forever.

For the normal-order, it will end in giving the correct answer 0. As the order evaluates , it will try to evaluate the test function and then the if-clause terminates the funcation and return 0.

* Exercise 1.6
Alyssa P. Hacker doesn't see whyifneeds to be provided as a special form. ``Why can't I just define it as an ordinary procedure in terms of cond?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:
#+BEGIN_SRC scheme
(define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause)))

(define (sqrt-iter guess x)
    (new-if (good-enough? guess x)
            guess
            (sqrt-iter (improve guess x)
                      ￼x)))
#+END_SRC
What happens when Alyssa attempts to use this to compute square roots? Explain.

** Answer
For similar reasons as Exercise 1.5, the function will end in infinite looping. As the applicative-order goes, when it try to evaluate the first layer, it will first evaluate =good-enough?= function and then evaluate =sqrt-iter=, and then evaluate =improve= and then =good-enough?=, for now the =new-if= is simply a function that needs to be evaluated. In this case it will never be evaluated, thus infinite looping.

[[file:sec1.1.png]]

* Exercise 1.7
The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost
always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

** Answer
#+BEGIN_SRC scheme
;Define error to measure
(define error 0.001)

;To improve the result using the Newton's method
(define (average x y)
    (/ (+ x y) 2))
(define (improve guess x)
    (average guess (/ x guess)))

;To test whether converage
(define (good-enough? guess x)
    (< (abs (- (improve guess x) guess)) error))

;To iterate until meet the converage
(define (sqrt-iter guess x) (if (good-enough? guess x)
                                guess
                                   (sqrt-iter (improve guess x) x)))

;Pack the thing
(define (sqrt x) (sqrt-iter 1.0 x))
#+END_SRC

Take ther =error = 0.001= and try to get the square root of 0.0001, the former gives 0.03 while latter yields 0.001. It is because that when it gets smaller, though it might misses hundreds by percentage, however, the number between guess's square and x is small. To calculate, give the former's absolute error to be error, the latter's absolute error between guess and x is =2*guess*error=.

Similarly, however for big numbers the former outperform the latter.

* Exercise 1.8
Newton's method for cube roots is based on the fact that if y is an approximation to the cube root of x, then a better approximation is given by the value:

(x/y^2 + 2y)/3

Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section 1.3.4 we will see how to implement Newton's method in general as an abstraction of these square- root and cube-root procedures.)

** Answer
#+BEGIN_SRC scheme
;Define error
(define cube-error 0.001)

;Define cube
(define (cube x) (* x x x))

;To test whether converage
(define (cube-good-enough? guess x)
    (< (abs (- (cube guess) x)) cube-error))

;To improve the guess
(define (cube-improve guess x)
    (/ (+ (* 2 guess) (/ x (square guess))) 3))

;To iterate
(define (curt-iter guess x)
    (if (cube-good-enough? guess x)
        guess
        (curt-iter (cube-improve guess x) x)))

;To pack
(define (curt x)
    (curt-iter 1.0 x))
#+END_SRC
