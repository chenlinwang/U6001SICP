* Exercise 2.54
Two lists are said to be equal? if they contain equal elements arranged in the same order.
For example,
#+BEGIN_SRC scheme
(equal? '(this is a list) '(this is a list))
#+END_SRC
is true, but
#+BEGIN_SRC scheme
(equal? '(this is a list) '(this (is a) list))
#+END_SRC
is false. To be more precise, we can define equal? recursively in terms of the basic eq? equality of symbols by saying that a and b are equal? if they are both symbols and the symbols are eq?, or if they are both lists such that (car a) is equal? to (car b) and (cdr a) is equal? to (cdr b). Using this idea, implement equal? as a procedure.
** Answer
#+BEGIN_SRC scheme
(define (own-list-equal? l1 l2)
    ;; Decide two lists to be equal. l1,l2:input list.
    ;; (list, list) -> (boolean)
    (define (ieq? l1 l2)
        ;; iteraly decide two lists to be equal. l1,l2:input list.
        ;; (list, list) -> (boolean)
        (if (null? l1)
            (if (null? l2) #t #f)
            (let ((e1 (car l1))
                  (r1 (cdr l1))
                  (e2 (car l2))
                  (r2 (cdr l2)))
              (cond ((and (symbol? e1) (symbol? e2)) (if (eq? e1 e2) (ieq? r1 r2) #f))
                    ((and (number? e1) (number? e2)) (if (= e1 e2) (ieq? r1 r2) #f))
                    ((and (list? e1) (list? e2)) (if (own-list-equal? e1 e2) (ieq? r1 r2) #f))
                    ((and (string? e1) (string? e2)) (if (equal? e1 e2) (ieq? r1 r2) #f))
                    (else #f)))))
  (if (= (length l1) (length l2))
      (ieq? l1 l2)
      #f))
#+END_SRC
* Exercise 2.55
Eva Lu Ator types to the interpreter the expression
#+BEGIN_SRC scheme
(car ''abracadabra)
#+END_SRC
To her surprise, the interpreter prints back quote. Explain.
** Answer
An apostroph, namely =`...= is equal to =(quote ...)=, thus we could write like:
#+BEGIN_SRC scheme
(car ''a)
;; equals:
(car '(quote a))
;; gives:
'quote
#+END_SRC
* Exercise 2.56
Show how to extend the basic differentiator to handle more kinds of expressions. For instance, implement the differentiation rule on exponent.By adding a new clause to the deriv program and defining appropriate procedures exponentiation?, base,exponent, andmake-exponentiation. (You may use the symbol =**= to denote exponentiation.) Build in the rules that anything raised to the power 0 is 1 and anything raised to the power 1 is the thing itself.
** Answer
#+BEGIN_SRC scheme
;; Primitives for exponent.
;; constructor
(define (make-exponentiation base exp)
    ;; make exponent out of base and exp.
    ;; (A,A) -> (list/number)
    (cond ((and (number? base) (number? exp)) (exponentiation base exp))
          ((and (number? exp) (= 0 exp)) 1)
          ((and (number? exp) (= 1 exp)) base)
          ((and (number? base) (= 0 base)) 0)
          ((and (number? base) (= 1 base)) 1)
          (else (list '** base exp))))

;;selector
(define base cadr)
(define exponent caddr)

;;operator
(define (exponentiation? expr)
    (and (expr? expr) (eq? '** (car expr))))


(define (d256 expr var)
  ;; To differentiate an expr within var. expr:expression to be differentiate; var:respect variable.
  ;; (list,symbol) -> (list)
  (cond ((number? expr) 0)
        ((symbol? expr) (if (same-symbol? expr var) 1 0))
        ((sum? expr) (make-sum (d256 (addend expr) var)
                               (d256 (augend expr) var)))
        ((product? expr) (make-sum (make-product (d256 (multiplier expr) var)
                                                 (multiplicant expr))
                                   (make-product (multiplier expr)
                                                 (d256 (multiplicant expr) var))))
        ((exponentiation? expr) (make-product (exponent expr) (make-product (make-exponentiation (base expr)
                                                                                                 (- (exponent expr) 1))
                                                                            (d256 (base expr) var))))
        (else (begin (display "Error: unrecongnized symbol:\n")
                     (display "\t")
                     (display expr)
                     (newline)))))

;; (display (d256 (list '** 'x 10) 'x))
;; (newline)
#+END_SRC
* Exercise 2.57
Extend the differentiation program to handle sums and products of arbitrary numbers of (two or more) terms. Then the last example above could be expressed as
#+BEGIN_SRC scheme
(deriv '(* x y (+ x 3)) 'x)
#+END_SRC
Try to do this by changing only the representation for sums and products, without changing the deriv procedure at all. For example, the addend of a sum would be the first term, and the augend would be the sum of the rest of the terms.
** Answer
Starting back, we should first change the condition for a legal expression:
#+BEGIN_SRC scheme
(define (expr? expr) (and (list? expr) (>= (length expr) 3)))
(define (allsymbols? vl)
    ;; check whether expression is all symbols but the first one.
    ;; (list)->(boolean)
    (if (null? vl) #t (if (number? (car vl)) #f (allsymbols? (cdr vl)))))
#+END_SRC
Then, when we try to do the actually calculation of numbers, I manage to code the following to separate all numbers from symbols and do as many number calculations as possible. This function will return a list, starting with the answer to all possible number calculations and then following by all the symbols. There is somehow a litter bit of circular defination here, but the terminal conditions will gurantee no infinite circling.
#+BEGIN_SRC scheme
;; Add up
(define (calculate-through vl init op sl op?)
    ;; calculate through a list. vlist: variable list; result:result of calculation; op: operator; slist: symbol list.
    ;; (list,number,(number,number)->(number),list) -> (list)
    (define (cc vlist result slist)
        (cond ((null? vlist) (cons result slist))
              ((number? (car vlist)) (cc (cdr vlist) (op result (car vlist)) slist))
              ((symbol? (car vlist)) (cc (cdr vlist) result (cons (car vlist) slist)))
              ((list? (car vlist)) (if (op? (car vlist))
                                              (cc (append (cdr (car vlist)) (cdr vlist)) result slist)
                                              (cc (cdr vlist) result
                                                  (cons (cond
                                                          ((sum? (car vlist)) (ms257 0 (car vlist)))
                                                          ((product? (car vlist)) (mp257 1 (car vlist))))
                                                        slist))))
              (else (errormsg "Variable list unrecognized!" vlist))))
  (cc vl init sl))

;; (display (calculate-through '(1 2 3 (+ 3 4 5) 4 5) 0 + (list) sum?))
;; (newline)
#+END_SRC
Now begin the real part, as we define a sum or product as:
#+BEGIN_SRC scheme
'(+ 1 2 x 4 5)
'(* 3 4 x 2)
#+END_SRC
The =aug= or =mnd= will be more complicated than before. If it is a standard expression with length 3, they will chop the first two elements off and return the third. Otherwise, it will make a new expression using =ms= or =mp=.
#+BEGIN_SRC scheme
(define (ms257 e1 . e2)
    ;; make sum out of e1 and list e2.
    ;; (A,list) -> (list)
    (if (null? e2)
        e1
        (let ((resultlist (calculate-through (cons e1 e2) 0 + (list) sum?)))
          (let ((num (car resultlist))
                (vlist (cdr resultlist))
                (vlistlen (length (cdr resultlist))))
            (cond ((= num 0) (cond ((= vlistlen 0) 0)
                                   ((= vlistlen 1) (car vlist))
                                   (else (cons '+ vlist))))
                  ((= vlistlen 0) num)
                  (else (cons '+ resultlist)))))))

;; (display (ms257 1 (+ 1 2 3 4) 1))
;; (newline)

(define add257 cadr)
(define (aug257 sum)
    ;; Take the augend of a sum.
    ;; (list) -> (number/list)
    (cond ((= (length sum) 3) (caddr sum))
          ((allsymbols? (cddr sum)) (cons '+ (cddr sum))) ;;check if is all symbols, avoid infinite circling.
          (else (ms257 0 (cons '+ (cddr sum))))))

(define (mp257 e1 . e2)
    ;; make product out of e1 and list e2.
    ;; (A,list) -> (list/A)
    (if (null? e2)
        e1
        (let ((resultlist (calculate-through (cons e1 e2) 1 * (list) product?)))
          (let ((num (car resultlist))
                (vlist (cdr resultlist))
                (vlistlen (length (cdr resultlist))))
            (cond ((= num 0) 0)
                  ((= num 1) (cond ((= vlistlen 0) 1)
                                   ((= vlistlen 1) (car vlist))
                                   (else (cons '* vlist))))
                  ((= vlistlen 0) num)
                  (else (cons '* resultlist)))))))

(define mer257 add257)
(define (mnd257 sum)
    ;; Take the augend of a sum.
    ;; (list) -> (number/list)
    (cond ((= (length sum) 3) (caddr sum))
          ((allsymbols? (cddr sum)) (cons '* (cddr sum))) ;;check if is all symbols, avoid infinite circling.
          (else (mp257 1 (cons '* (cddr sum))))))
#+END_SRC
The =differentiate= is simply the same, with some names replaced by the new functions.
#+BEGIN_SRC scheme
(define (d257 expr var)
  ;; To differentiate an expr within var. expr:expression to be differentiate; var:respect variable.
  ;; (list,symbol) -> (list)
  (cond ((number? expr) 0)
        ((symbol? expr) (if (same-symbol? expr var) 1 0))
        ((sum? expr) (ms257 (d257 (add257 expr) var)
                            (d257 (aug257 expr) var)))
        ((product? expr) (ms257 (mp257 (d257 (mer257 expr) var)
                                       (mnd257 expr))
                                (mp257 (mer257 expr)
                                       (d257 (mnd257 expr) var))))
        ((exponentiation? expr) (mp257 (exponent expr) (mp257 (make-exponentiation (base expr)
                                                                                   (- (exponent expr) 1))
                                                              (d257 (base expr) var))))
        (else (errormsg "Unrecongnized Symbols" expr))))
#+END_SRC
* Exercise 2.58
Suppose we want to modify the differentiation program so that it works with ordinary mathematical notation, in which + and * are infix rather than prefix operators. Since the differentiation program is defined in terms of abstract data, we can modify it to work with different representations of expressions solely by changing the predicates, selectors, and constructors that define the representation of the algebraic expressions on which the differentiator is to operate.

1. Show how to do this in order to differentiate algebraic expressions presented in infix form, such as =(x + (3 * (x + (y + 2))))=. To simplify the task, assume that + and * always take two arguments and that expressions are fully parenthesized.
2. The problem becomes substantially harder if we allow standard algebraic notation, such as =(x + 3 * (x + y + 2))=, which drops unnecessary parentheses and assumes that multiplication is done beforeaddition. Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?
** Answer
For the first problem, it is simple. Just change the order of the operator and then it is ok.
#+BEGIN_SRC scheme
;; 1. Change the start
;; Constructors
(define (make-sum258 e1 e2)
  ;; make a sum out of e1 and e2.e1:addend; e2:augend.
  ;; (A,A) -> (list/number)
  (cond ((and (number? e1) (number? e2)) (+ e1 e2))
        ((and (number? e1) (= e1 0)) e2)
        ((and (number? e2) (= e2 0)) e1)
        (else (list e1 '+ e2) )))

(define (make-product258 e1 e2)
  ;; make a product out of e1 and e2.e1:multiplier;e2:multiplicand.
  ;; (A,A) -> (list/number)
  (cond ((and (number? e1) (number? e2)) (* e1 e2))
        ((and (number? e1) (= e1 1)) e2)
        ((and (number? e1) (= e1 0)) 0)
        ((and (number? e2) (= e2 1)) e1)
        ((and (number? e2) (= e2 0)) 0)
        (else (list '* e1 e2) )))

;; Selectors
(define addend258 car)
(define augend258 caddr)
(define multiplier258 car)
(define multiplicant258 caddr)
;; The Operators
(define (sum?258 expr) (and (expr? expr) (eq? '+ (cadr expr))))
(define (product?258 expr) (and (expr? expr) (eq? '* (cadr expr))))

(define (differentiate258 expr var)
  ;; To differentiate an expr within var. expr:expression to be differentiate; var:respect variable.
  ;; (list,symbol) -> (list)
  (cond ((number? expr) 0)
        ((symbol? expr) (if (same-symbol? expr var) 1 0))
        ((sum?258 expr) (make-sum258 (differentiate258
                                      (addend258 expr) var)
                                     (differentiate258
                                      (augend258 expr) var)))
        ((product?258 expr) (make-sum258 (make-product258
                                          (differentiate258
                                           (multiplier258 expr)
                                           var)
                                          (multiplicant258 expr))
                                         (make-product258
                                          (multiplier258 expr)
                                          (differentiate258
                                           (multiplicant258 expr)
                                           var))))
        (else (begin (display "Error: unrecongnized symbol:\n")
                     (display "\t")
                     (display expr)
                     (newline)))))

;; Testing
;; (display (differentiate258 '(x + (3 * (x + (y + 2)))) 'x))
;; (newline)
#+END_SRC

For second one, it is a bit tricky. We it is actually the same when it comes to addition,but it differs when it comes to multiplication. We should find how long is the multiplicant and then make two sums instead of one.
#+BEGIN_SRC scheme
;; 2 without unnecessary bracket
;; Constructor
(define (make-sum2582 e1 e2)
  ;; make a sum out of e1 and e2.e1:addend; e2:augend.
  ;; (A,A) -> (list/number)
  (cond ((and (number? e1) (number? e2)) (+ e1 e2))
        ((and (number? e1) (= e1 0)) e2)
        ((and (number? e2) (= e2 0)) e1)
        (else (list e1 '+ e2) )))

(define (make-product2582 e1 e2)
  ;; make a product out of e1 and e2.e1:multiplier;e2:multiplicand.
  ;; (A,A) -> (list/number)
  (cond ((and (number? e1) (number? e2)) (* e1 e2))
        ((and (number? e1) (= e1 1)) e2)
        ((and (number? e1) (= e1 0)) 0)
        ((and (number? e2) (= e2 1)) e1)
        ((and (number? e2) (= e2 0)) 0)
        (else (list e1 '* e2) )))

;; Selectors
(define addend2582 car)
(define (augend2582 expr)
    (if (= (length expr) 3)
        (caddr expr)
        (cddr expr)))
(define multiplier2582 car)
(define (multiplicant2582 expr)
  ;; To find the multiplicant until an addition appears
  ;; (list) -> (symbol/list)
  (if (or (= (length expr) 3)
          (sum?258 (cddr expr)))
      (multiplicant258 expr)
      (list (multiplicant258 expr)
            '*
            (multiplicant2582 (cddr expr)))))

;; ;; Test for multiplicant2582
;; (display (multiplicant2582 '(1 * 2 + 2)))
;; (newline)
;; (display (multiplicant2582 '(1 * 2)))
;; (newline)
;; (display (multiplicant2582 '(1 * 2 * 2 + 2)))
;; (newline)
;; (display (multiplicant2582 '(1 * 2 * 2)))
;; (newline)
;; (display (multiplicant2582 '(1 * 2 * 2 * 3 * 4)))
;; (newline)

(define (after-add expr)
  ;; To find the first appeared addition to the end.
  ;; (list) -> (number/symbol/list)
  (cond ((= (length expr) 3) 0)
        ((sum?258 (cddr expr)) (if (= (length (cddddr expr)) 1)
                                   (car (cddddr expr))
                                   (cddddr expr)))
        ((product?258 (cddr expr)) (after-add (cddr expr)))
        (else (errormsg "after-add error" expr))))
;; Testing for after-add
;; (display (after-add '(1 * 2 + 2)))
;; (newline)
;; (display (after-add '(1 * 2)))
;; (newline)
;; (display (after-add '(1 * 2 * 2 + 2 + 3)))
;; (newline)
;; (display (after-add '(1 * 2 * 2)))
;; (newline)
;; (display (after-add '(1 * 2 * 2 * 3 * 4 + 3 + 4 + 5)))
;; (newline)

;; Main function
(define (diff-norm expr var)
  ;; To differentiate normal order expressions
  ;; (list,symbol) -> (list)
  (cond ((number? expr) 0)
        ((symbol? expr) (if (same-symbol? expr var) 1 0))
        ((sum?258 expr) (make-sum2582 (diff-norm
                                       (addend2582 expr) var)
                                      (diff-norm
                                       (augend2582 expr) var)))
        ((product?258 expr) (make-sum2582
                             (make-product2582
                              (diff-norm
                               (multiplier2582 expr)
                               var)
                              (multiplicant2582 expr))
                             (make-sum2582
                              (make-product2582
                               (multiplier2582 expr)
                               (diff-norm
                                (multiplicant2582 expr)
                                var))
                              (diff-norm (after-add expr)
                                         var))))
        (else (errormsg "diff-norm" expr))))

;; ;; Test for diff-norm
;; (display (diff-norm '(x + 3 * (x + y + 2)) 'x))
;; (newline)
;; (display (diff-norm '(x * x + 3 * (x + y + 2) + 3 * y + 3 + 4) 'x))
;; (newline)
#+END_SRC
* Exercise 2.60
We specified that a set would be represented as a list with no duplicates. Now suppose we allow duplicates. For instance, the set {1,2,3} could be represented as the list (2 3 2 1 3 2 2). Design procedures =element-of-set?=, =adjoin-set=, =union-set=, and =intersection-set= that operate on this representation. How does the efficiency of each compare with the corresponding procedure for the non-duplicate representation? Are there applications for which you would use this representation in preference to the non-duplicate one?
** Answer
If we keep the duplicates, it will save a great time doing joining  and unioning, but cost a fortune doing the belonging? to and intersectioning.
#+BEGIN_SRC scheme
;; Constructor
(define make-set list)

;; Operation
(define (element-of-set? e set)
       ;; Decide whether a element is in set.e:element;set:set
       ;; (number/symbol,list) -> (boolean)
       (cond ((null? set) #f)
             ((equal? e (car set)) #t)
             (else (element-of-set? e (cdr set)))))

(define adjoin-set cons)
(define union-set append)
(define (intersection-set s1 s2)
  ;; To interset two sets.s1:set 1;s2:set 2.
  ;; (list,list) -> (list)
  (if (null? s1)
      (list)
      (let ((e1 (car s1))
            (r1 (cdr s1)))
        (if (element-of-set? e1 s2)
            (cons e1 (intersection-set r1 s2))
            (intersection-set r1 s2)))))
#+END_SRC

The joining and unioning become \Theta (1) and the beloning? and intersection become \Theta (n).

It seems that the order has dropped, but it costs more space and cost more time if there are lots of unioning and either belonging? or intersectioning.

So if there are few joining and unioning, we would prefer the duplicate one.
* Exercise 2.61
Give an implementation of adjoin-set using the ordered representation. By analogy with element-of-set? show how to take advantage of the ordering to produce a procedure that requires on the average about half as many steps as with the unordered representation.
** Answer
By now, I have been using some functions that I created for some convenience, like =list-get= for getting certain sublist of a list. It works exactly the same way for list in =Python=. I used binary search instead. So the order of growth should be \Theta (\log n) .
#+BEGIN_SRC scheme
(define (adjoin-order-set e s)
    ;; To insert an element into set. e:element;s:set.
    (let ((slen (length s))
          (half (inexact->exact (floor (/ (length s) 2)))))
      ;; See how many elements are left
      (cond ((= slen 0) (list e)) ;; None left
            ((= half 0) (let ((halfele (car s))) ;; One left
                          (cond ((= halfele e) s)
                                ((< halfele e) (list halfele e))
                                ((> halfele e) (cons e s)))))
            ;; More than two left
            (else
             (let ((halfele (list-ref s half)) ;; Get the middle element
                   (former (list-get s 0 half)) ;; Get the former part
                   (latter (list-get s (+ half 1) -1))) ;; Get the latter part
               (cond ((= halfele e) s)
                     ((> halfele e) (append
                                     (adjoin-order-set e former)
                                     (cons halfele latter)))
                     ((< halfele e) (append
                                     former
                                     (list halfele)
                                     (adjoin-order-set e latter)))))))))
#+END_SRC

* Exercise 2.62
Give a ￼\Theta (n) implementation of =union-set= for sets represented as ordered lists.
** Answer
Done in the Implementation.
#+BEGIN_SRC scheme
(define (union-order-set s1 s2)
    ;; To union order set.s1: order set 1; s2: order set 2.
    ;; (list,list) -> (list)
    ;; See if any of sets are empty
    (cond ((null? s1) s2)
          ((null? s2) s1)
          ;; Both not empty, compare their first elements
          (else (let ((e1 (car s1))
                      (e2 (car s2)))
                  (cond ((< e1 e2)
                         (cons e1
                               (union-order-set (cdr s1) s2)))
                        ((> e1 e2)
                         (cons e2
                               (union-order-set s1 (cdr s2))))
                        ;; Equal, then just get one.
                        (else
                         (cons e1
                               (union-order-set (cdr s1)
                                                (cdr s2)))))))))
#+END_SRC
* Exercise 2.63
1. Do the two procedures produce the same result for every tree? If not, how do the results differ? What lists do the two procedures produce for the trees in figure 2.16?
2. Do the two procedures have the same order of growth in the number of steps required to convert a balanced tree with n elements to a list? If not, which one grows more slowly?
** Answer
1. They do have the same result.
2. They are also the same order or growth.
#+BEGIN_SRC scheme
;; Convert tree to list
(define (tree->list-1 t)
    ;; version 1. t:tree.
    ;; (list) -> (list)
    (if (empty-tree? t)
        t
        (append (tree->list-1 (left-branch t))
                (list (entry t))
                (tree->list-1 (right-branch t)))))

;; ;; Testing
;; (display (tree->list-1 tree1))
;; (newline)

(define (tree->list-2 t)
    ;; version 2. t: tree.
    ;; (list) -> (list)
    (define (copy-to-list t rl)
        ;; Copy the tree to the list.t:tree; rl:resultlist.
        ;; (list,list) -> (list)
        (if (empty-tree? t)
            rl
            (copy-to-list (left-branch t)
                          (cons (entry t)
                                (copy-to-list (right-branch t)
                                              rl)))))
  (copy-to-list t (list)))

;; ;; Testing
;; (display (tree->list-2 tree1))
;; (newline)
#+END_SRC

* Exercise 2.64
The following procedure =list->tree= converts an ordered list to a balanced binary tree. The helper procedure =partial-tree= takes as arguments an integer n and list of at least n elements and constructs a balanced tree containing the first n elements of the list. The result returned by =partial-tree= is a pair (formed with cons) whose car is the constructed tree and whose cdr is the list of elements not included in the tree.
#+BEGIN_SRC scheme
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))
#+END_SRC
1. Write a short paragraph explaining as clearly as you can how partial-tree works. Draw the tree produced by list->tree for the list (1 3 5 7 9 11).
2. What is the order of growth in the number of steps required by list->tree to convert a list of n elements?
** Answer
1. The partial-tree works in the following way: Given a list and a number, it first see whether the number is 0. If it is 0, then just return a pair of an empty list and the list. If not, it then figures out the left subtree size, and then use recursion to get the pair of the left subtree and the remaining elements. After that, it calculates the right subtree size and then use the recursion to get the responding pair. Make a tree out of subtrees and return a pair of them and rest members.

2. \Theta (\log n)

* Exercise 2.65
Use the results of exercises 2.63 and 2.64 to give \Theta (n) implementations of =union-set= and =intersection-set= for sets implemented as (balanced) binary trees.

** Answer
*** n*log(n)
We make full use of =element-of-tree?= and =adjoin-tree=, which is both \Theta (\log n). And for every element in tree one. Give certain conditions, we join them together. So the order is \Theta (n \log n).
#+BEGIN_SRC scheme
(define (union-tree t1 t2)
    ;; To union two trees. t1: tree 1; t2:tree 2.
    ;; (list,list) -> (list)
    (let ((tl1 (tree->list-1 t1))) ;; Convert tree 1 to a list
      (let iter ((left tl1) ;; Initialize left to be tree list
                 (currenttree t2)) ;; Initialize result tree to be tree 2
           (if (null? left)
               currenttree
               (iter (cdr left)  ;; Get rest of left member
                     (adjoin-tree (car left) ;; Join element to reuslt tree
                                  currenttree))))))

(define (intersect-tree t1 t2)
    ;; To intersect two trees. t1: tree 1; t2:tree 2.
    ;; (list,list) -> (list)
    (let ((tl1 (tree->list-1 t1))) ;; Convert tree 1 and to a list
      (let iter ((left tl1) ;; Initialize left1 to be tree list 1
                 (currenttree empty-tree)) ;; Initialize result tree to be empty tree.
           (if (null? left)
               currenttree
               (let ((first (car left)) ;; Get first element of left.
                     (restleft (cdr left)))
                 (if (element-of-tree? first t2) ;; See whether tree 2 contains it.
                     (iter restleft
                           (adjoin-tree first currenttree))
                     (iter restleft currenttree)))))))
#+END_SRC
*** n
The right thing to do is convert both t1 and t2 to l1 and l2(\Theta (\log n) and then merge order lists (\Theta (n)), and finally, conver back (\Theta (\log n)).
#+BEGIN_SRC scheme
(define (union-tree2 t1 t2)
    ;; n verion
    (let ((l1 (tree->list-1 t1))
          (l2 (tree->list-1 t2)))
      (list->tree (union-order-set l1 l2))))

(define (intersect-tree2 t1 t2)
    ;; n version
    (let ((l1 (tree->list-1 t1))
          (l2 (tree->list-1 t2)))
      (list->tree (intersect-order-set l1 l2))))
#+END_SRC

* Exercise 2.66
Implement the lookup procedure for the case where the set of records is structured as a binary tree, ordered by the numerical values of the keys.

** Answer
#+BEGIN_SRC scheme
(define (look-up key data-tree)
    ;; To look up a data using key. key:key; data-tree:database as tree structure.
    ;; (number,list) -> pair
    (if (empty-tree? data-tree)
        #f
        (let ((current-key (car (entry data-tree)))
              (node (entry data-tree)))
          (cond ((= current-key key) node)
                ((< current-key key) (look-up
                                      key
                                      (right-branch data-tree)))
                ((> current-key key) (look-up
                                      key
                                      (left-branch data-tree)))))))
#+END_SRC

* Exercise 2.67
Define an encoding tree and a sample message:
#+BEGIN_SRC scheme
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
; symbol (cadr pair)) ; frequency
(make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
#+END_SRC
Use the decode procedure to decode the message, and give the result.
** Answer
Just use the function and get:
: (A D A B B C A)

* Exercise 2.68
The encode procedure takes as arguments a message and a tree and produces the list of bits that gives the encoded message.
#+BEGIN_SRC scheme
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
#+END_SRC
Encode-symbol is a procedure, which you must write, that returns the list of bits that encodes a given symbol according to a given tree. You should design encode-symbol so that it signals an error if the symbol is not in the tree at all. Test your procedure by encoding the result you obtained in exercise 2.67 with the sample tree and seeing whether it is the same as the original sample message.
** Answer
Straight forward!
#+BEGIN_SRC scheme
(define (encode-symbol symbol tree)
    ;; To encode a symbol with a tree. symbol:symbol; tree: tree.
    ;; (symbol,list) -> (list)
    (if (belong-to-set? symbol (symbols tree))
        (let iter ((current-tree tree))
             (cond ((leaf? current-tree) (list))
                   ((belong-to-set? symbol
                                    (symbols (left-branch current-tree)))
                    (cons 0 (iter (left-branch current-tree))))
                   (else
                    (cons 1 (iter (right-branch current-tree))))))
        (errormsg "encode-symbol: no match symbol"
                  (list symbol tree))))
#+END_SRC
* Exercise 2.69
The following procedure takes as its argument a list of symbol-frequency pairs (where no symbol appears in more than one pair) and generates a Huffman encoding tree according to the Huffman algorithm.
#+BEGIN_SRC scheme
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
#+END_SRC
Make-leaf-set is the procedure given above that transforms the list of pairs into an ordered set of leaves. Successive-merge is the procedure you must write, using make-code-tree to successively merge the smallest-weight elements of the set until there is only one element left, which is the desired Huffman tree. (This procedure is slightly tricky, but not really complicated. If you find yourself designing a complex procedure, then you are almost certainly doing something wrong. You can take significant advantage of the fact that we are using an ordered set representation.)

** Answer
First, design the loop for =successive-merge=, we would see whether the leaf-set has only one node, then done. If not, get the last two nodes and merge them and insert them into the right place among the leaf-set.
#+BEGIN_SRC scheme
(define (successive-merge leaves)
    ;; Recursively merge the leaves to a huffman tree. leaves: tree leaves set.
    ;; (list) -> (list)
    (cond ((null? leaves) #f)
          ((= (length leaves) 1) (car leaves))
          (else
           (let iter ((last-two (list-get leaves -3 -1))
                      (remain (list-get leaves 0 -3)))
                (if (null? remain)
                    (car (insert-leaf-set
                          (make-code-tree
                           (car last-two)
                           (cadr last-two))
                          remain))
                    (iter (list-get (insert-leaf-set
                                     (make-code-tree
                                      (car last-two)
                                      (cadr last-two))
                                     remain) -3 -1)
                          (list-get (insert-leaf-set
                                     (make-code-tree
                                      (car last-two)
                                      (cadr last-two))
                                     remain) 0 -3)))))))

(define (generate-huffman-tree pairs)
    (successive-merge (make-leaf-set pairs)))
#+END_SRC
Now, it is time for insertion, I write a binary insertion with \Theta (\log n). The tricky part is you have to test whether a node is a leaf or not. The input =node= in the previous procedure, has to be a node but not a leaf. But nevertheless, I put the check on so we could use it to sort the list.
#+BEGIN_SRC scheme
(define (insert-leaf-set node leaf-set)
    ;; Insert the node into a leaf-set.
    ;; (list,list) -> (list)
    (if (null? leaf-set)
        (list node)
        (let ((half (inexact->exact
                     (floor (/ (length leaf-set) 2)))))
          (let ((halfnode (list-ref leaf-set half)))
            (let ((nodeweight (if (leaf? node)
                                  (weight-leaf node)
                                  (weight node)))
                  (halfweight (if (leaf? halfnode)
                                  (weight-leaf halfnode)
                                  (weight halfnode))))
              (cond ((= nodeweight halfweight)
                     (append (list-get leaf-set 0 half)
                             (list halfnode node)
                             (list-get leaf-set (+ half 1) -1)))
                    ((> nodeweight halfweight)
                     (append (insert-leaf-set
                             node
                             (list-get leaf-set 0 half))
                            (list-get leaf-set half -1)))
                    ((< nodeweight halfweight)
                     (append (list-get leaf-set 0 (+ half 1))
                             (insert-leaf-set
                              node
                              (list-get leaf-set (+ half 1) -1))))))))))
#+END_SRC
* Exercise 2.70
The following eight-symbol alphabet with associated relative frequencies was designed to efficiently encode the lyrics of 1950s rock songs. (Note that the "symbols" of an "alphabet" need not be individual letters.)
| symbol | code | symbol | code |
|--------+------+--------+------|
| A      |    2 | NA     |   16 |
| BOOM   |    1 | SHA    |    3 |
| GET    |    2 | YIP    |    9 |
| JOB    |    2 | WAH    |    1 |
Use generate-huffman-tree in (exercise 2.69) to generate a corresponding Huffman tree, and use encode (exercise 2.68) to encode the following message:
#+BEGIN_EXAMPLE
Get a job
Sha na na na na na na na na
Get a job
Sha na na na na na na na na
Wah yip yip yip yip yip yip yip yip yip
Sha boom
#+END_EXAMPLE
How many bits are required for the encoding? What is the smallest number of bits that would be needed to encode this song if we used a fixed-length code for the eight-symbol alphabet?

** Answer
As the pairs is not naturally in order, the following procedure generate the ordered leaives set from pairs, using the procedure I wrote for the proceding exercise.
#+BEGIN_SRC scheme
(define (make-order-leaf-set pairs)
    ;; To make an order leaf set from pairs.
    ;; (list) -> (list)
    (let iter ((current-set (list))
               (remain (make-leaf-set pairs)))
         (if (null? remain)
             current-set
             (iter (insert-leaf-set
                    (car remain)
                    current-set)
                   (cdr remain)))))
#+END_SRC
As the generate-huffman-tree takes in ordered pairs, we use the successive-merge directly.
#+BEGIN_SRC scheme
;; (define leaf-set (make-order-leaf-set '((a 2) (na 16) (boom 1) (sha 3) (get 2) (yip 9) (job 2) (wah 1))))
;; (define huffman-tree (successive-merge leaf-set))
;; (define song-code (encode '(get a job
;;                             sha na na na na na na na na
;;                             get a job
;;                             sha na na na na na na na na
;;                             wah yip yip yip yip yip yip yip yip
;;                             yip
;;                             sha boom)
;;                           huffman-tree))
;; (display song-code)
;; (newline)
;; (display (decode song-code huffman-tree))
;; (newline)
#+END_SRC
And the result gives:
: (0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 1 0)
It is 84 in length. For fixed length encoding, as we have 8 symbols, we have to use a length of 3. So as the song has 36 symbols, we have the coder as 108 in length.


* Exercise 2.71
Suppose we have a Huffman tree for an alphabet of n symbols, and that the relative frequencies of the symbols are 1, 2, 4, ..., 2^{n-1}. Sketch the tree for n=5; for n=10. In such a tree (for general n) how may bits are required to encode the most frequent symbol? the least frequent symbol?
** Answer
We could prove,by induction,that the order of leaves set will never change, if the frequencies of the symbols are 1, 2, 4, ..., 2^{n-1}, Thus the huffman tree will have a depth of n. So the least frequent symbol is just n and the most is 1.
* Exercise 2.72
Consider the encoding procedure that you designed in exercise 2.68. What is the order of growth in the number of steps needed to encode a symbol? Be sure to include the number of steps needed to search the symbol list at each node encountered. To answer this question in general is difficult. Consider the special case where the relative frequencies of the n symbols are as described in exercise 2.71, and give the order of growth (as a function of n) of the number of steps needed to encode the most frequent and least frequent symbols in the alphabet.
** Answer
#+BEGIN_SRC scheme
    (if (belong-to-set? symbol (symbols tree))
        (let iter ((current-tree tree))
             (cond ((leaf? current-tree) (list))
                   ((belong-to-set? symbol
                                    (symbols (left-branch current-tree)))
                    (cons 0 (iter (left-branch current-tree))))
                   (else
                    (cons 1 (iter (right-branch current-tree))))))
        (errormsg "encode-symbol: no match symbol"
                  (list symbol tree))))
#+END_SRC
Let go through the program:
1. =belong-to-set?= go through the symbol list, so the order is \Theta (n)
2. Other does not cost anything.
So:
1. For the most frequent symbol, we have \Theta (n)
2. For the least frequent symbol, we have to dig down a depth of n. So we have \Theta (n^{2})
